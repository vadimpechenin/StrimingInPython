"""
Consumer отвечает за чтение сообщений из Kafka. Он может быть использован для обработки данных, анализа или передачи
их в другие системы. Рассмотрим пример создания простого консумера на Python.
Объяснение кода
1. Конфигурация: Указываем адрес Kafka Broker, идентификатор группы и настройку авто-сброса смещения. Идентификатор группы позволяет нескольким консумерам работать вместе и делить нагрузку.
2. Создание Consumer: Создаем объект Consumer с указанной конфигурацией. Этот объект будет использоваться для чтения сообщений из Kafka.
3. Подписка на топик: Используем метод subscribe для подписки на указанный топик. Консумер будет получать сообщения из этого топика.
4. Чтение сообщений: В бесконечном цикле используем метод poll для чтения сообщений из Kafka. Метод poll блокирует выполнение программы до тех пор, пока не будет получено сообщение или не истечёт таймаут.
5. Обработка ошибок: Проверяем наличие ошибок и обрабатываем их соответствующим образом. Это позволяет гарантировать надёжность и стабильность работы консумера.
6. Закрытие Consumer: Гарантируем закрытие консумера в блоке finally. Это важно для освобождения ресурсов и завершения работы консумера корректным образом.

"""
from confluent_kafka import Consumer, KafkaException, KafkaError


conf = {
    'bootstrap.servers': 'localhost:9092',  # Список серверов Kafka
    'group.id': 'mygroup',                  # Идентификатор группы потребителей
    'auto.offset.reset': 'earliest'         # Начальная точка чтения ('earliest' или 'latest')
}

consumer = Consumer(conf)

topic = 'my_topic'
consumer.subscribe([topic])

try:
    while True:
        msg = consumer.poll(timeout=1.0)
        if msg is None:
            continue
        if msg.error():
            if msg.error().code() == KafkaError._PARTITION_EOF:
                print(f'Конец раздела {msg.topic()} [{msg.partition()}]')
            elif msg.error():
                raise KafkaException(msg.error())
        else:
            print(f'Получено сообщение: {msg.value().decode("utf-8")}')
finally:
    consumer.close()